services:
  redis:
    image: redis:7
    container_name: orion-redis
    restart: always

  backend:
    build:
      context: .
      dockerfile: server/Dockerfile
    working_dir: /app
    command: ["node", "build/server.js"]
    environment:
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./shared-types:/app/shared-types
    depends_on:
      - redis
    restart: always

  worker:
    build:
      context: .
      dockerfile: server/Dockerfile
    working_dir: /app
    command: ["node", "build/worker/worker.js"]
    environment:
      - REDIS_URL=${REDIS_URL}
    volumes:
      - ./shared-types:/app/shared-types
    depends_on:
      - redis
    restart: always

  frontend:
    build:
      context: .
      dockerfile: client/Dockerfile
    volumes:
      - ./shared-types:/app/shared-types
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:3000"
    restart: always

  nginx:
    image: nginx:stable
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    environment:
      - DOMAIN=${DOMAIN}
    depends_on:
      - frontend
      - backend
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    environment:
      - DOMAIN=${DOMAIN}
    entrypoint: "/bin/sh -c"
    command: >
      "trap exit TERM; 
      while :; do 
        certbot renew --webroot -w /var/www/certbot; 
        sleep 12h & 
        wait $${!}; 
      done"
    restart: unless-stopped
